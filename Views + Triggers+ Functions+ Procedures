Hamdan:

View1: Top-Spending Customers
Code:
CREATE VIEW Top_Spending_Customers AS
SELECT 
    c.Username, 
    c.First_Name, 
    c.Last_Name, 
    SUM(p.Quantity * i.Price) AS Total_Spent
FROM 
    Purchases_Items p
JOIN 
    Items i ON p.Barcode = i.Barcode
JOIN 
    Customer c ON p.Username = c.Username
GROUP BY 
    c.Username, c.First_Name, c.Last_Name
ORDER BY 
    Total_Spent DESC;


View2: Total Working Hours by Staff in Each Branch
Code:
CREATE VIEW Staff_Working_Hours AS
SELECT 
    s.BranchID, 
    s.SSN, 
    s.First_Name, 
    s.Last_Name, 
    s.Hours AS Total_Hours
FROM 
    Staff s
WHERE 
    s.Hours > 0
ORDER BY 
    s.BranchID, Total_Hours DESC;


Trigger: Prevent Stock from Going Negative in Branch Inventory
Code:
CREATE OR REPLACE FUNCTION prevent_negative_stock()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.Qty_Stored < 0 THEN
        RAISE EXCEPTION 'Stock cannot be negative for item % in branch %', NEW.Barcode, NEW.BranchID;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_prevent_negative_stock
BEFORE INSERT OR UPDATE ON Stores_Items
FOR EACH ROW
EXECUTE FUNCTION prevent_negative_stock();




Function: Get Total Sales by Customer
Code:
CREATE OR REPLACE FUNCTION total_sales_by_customer(username_input VARCHAR)
RETURNS NUMERIC AS $$
DECLARE
    total_sales NUMERIC := 0;
BEGIN
    SELECT SUM(bb.Quantity * bs.Price) 
    INTO total_sales
    FROM Buys_Books bb
    JOIN Books_for_Sale bs ON bb.ISBN = bs.ISBN
    WHERE bb.Username = username_input;

    RETURN COALESCE(total_sales, 0); -- Returns 0 if no purchases are found
END;
$$ LANGUAGE plpgsql;


example: SELECT total_sales_by_customer('en01');




Stored Procedure: Transfer Book Stock Between Branches
Code:
CREATE OR REPLACE PROCEDURE transfer_book_stock(
    from_branch VARCHAR,
    to_branch VARCHAR,
    book_isbn CHAR(13), -- Renamed parameter to avoid conflict
    transfer_quantity INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Check if the from_branch has enough stock
    IF NOT EXISTS (
        SELECT 1 
        FROM Stores_Booksforsale 
        WHERE BranchID = from_branch AND ISBN = book_isbn AND Number_of_Copies >= transfer_quantity
    ) THEN
        RAISE EXCEPTION 'Insufficient stock in branch % for book %', from_branch, book_isbn;
    END IF;

    -- Deduct stock from from_branch
    UPDATE Stores_Booksforsale
    SET Number_of_Copies = Number_of_Copies - transfer_quantity
    WHERE BranchID = from_branch AND ISBN = book_isbn;

    -- Add stock to to_branch
    INSERT INTO Stores_Booksforsale (BranchID, ISBN, Number_of_Copies)
    VALUES (to_branch, book_isbn, transfer_quantity)
    ON CONFLICT (BranchID, ISBN) 
    DO UPDATE SET Number_of_Copies = Stores_Booksforsale.Number_of_Copies + transfer_quantity;
END;
$$;


example: CALL transfer_book_stock('LIBTECH01', 'LIBTECH02', '0000000003421', 5);





Tia:

View1: This view lists all books available for sale, categorized by genre along with their prices.
Code:
CREATE VIEW Books_Available_For_Sale AS
SELECT 
    bs.ISBN, 
    bs.Title, 
    bs.Genre, 
    bs.Price, 
    bs.Edition, 
    bs.Lang, 
    p.Publisher_Name
FROM 
    Books_for_Sale bs
JOIN 
    Publisher p ON bs.Publisher_Name = p.Publisher_Name
ORDER BY 
    bs.Genre, bs.Price DESC;

View 2: This view provides a summary of items supplied by each supplier along with the total quantity supplied
Code: 
CREATE VIEW Supplier_Supply_Summary AS
SELECT 
    s.Supp_Name, 
    i.Items_Name, 
    SUM(i.Qty_Supplied) AS Total_Supplied
FROM 
    Items i
JOIN 
    Supplier s ON i.Supp_Name = s.Supp_Name
GROUP BY 
    s.Supp_Name, i.Items_Name
ORDER BY 
    s.Supp_Name;


Trigger: Automatically Update the Quantity of Books for Sale After a Purchase
Code:
CREATE OR REPLACE FUNCTION update_book_stock()
RETURNS TRIGGER AS $$
BEGIN
    -- Check if the number of copies in stock will become negative
    IF (SELECT Number_of_Copies FROM Stores_Booksforsale 
        WHERE BranchID = NEW.BranchID AND ISBN = NEW.ISBN) < NEW.Quantity THEN
        RAISE EXCEPTION 'Not enough copies in stock for ISBN % in branch %', NEW.ISBN, NEW.BranchID;
    END IF;
    
    -- Update the stock after a successful purchase
    UPDATE Stores_Booksforsale
    SET Number_of_Copies = Number_of_Copies - NEW.Quantity
    WHERE BranchID = NEW.BranchID AND ISBN = NEW.ISBN;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_book_stock
AFTER INSERT ON Buys_Books
FOR EACH ROW
EXECUTE FUNCTION update_book_stock();


Function: This function checks whether a specific book (based on its ISBN) is available in a given branch and returns the number of copies available.
Code:
CREATE OR REPLACE FUNCTION check_book_availability(isbn_input CHAR(13), branch_id_input VARCHAR)
RETURNS INTEGER AS $$
DECLARE
    available_copies INTEGER := 0;
BEGIN
    SELECT Number_of_Copies
    INTO available_copies
    FROM Stores_Booksforsale
    WHERE ISBN = isbn_input AND BranchID = branch_id_input;

    RETURN COALESCE(available_copies, 0); -- Returns 0 if the book is not available
END;
$$ LANGUAGE plpgsql;

Example usage:
SELECT check_book_availability('0000000002431', 'LIBTECH01');




Zak:

View1: -- please write the first view query
Code:

--please write is code here


-- please follow the same format for the remaining views/ triggers, etc (check hamdan's part)
