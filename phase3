# we have 18 tables to create and insert date
CREATE TABLE Authentication_System (
    email VARCHAR(50),
    passcode VARCHAR(20) NOT NULL,
    CONSTRAINT pk_Authentication_System PRIMARY KEY (email),
    CONSTRAINT chk_email CHECK (
        email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    ),
    CONSTRAINT chk_passcode CHECK (                                          
        passcode ~ '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^a-zA-Z0-9]).{1,}$'
    )
    #the passcode must contain at least one upper and lower case and 1 number and 1 symbol
    #the email should follow the standard format
);
create table Customer (
    Username VARCHAR(20),
    Phone_Number VARCHAR(10) NOT NULL,
    Address TEXT,
    Sex CHAR(1) NOT NULL CHECK (Sex IN ('M', 'F')),
    First_Name VARCHAR(20) NOT NULL,
    Last_Name VARCHAR(20) NOT NULL,
    Email VARCHAR(50) UNIQUE,
    
    CONSTRAINT pk_Customer PRIMARY KEY (Username),
    CONSTRAINT fk_Customer FOREIGN KEY (Email) REFERENCES Authentication_System(Email)
        ON UPDATE CASCADE
        ON DELETE SET NULL,
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~  '^[0-9]{2}/[0-9]{6}$' )
    
);
create table Library (
    BranchID VARCHAR(10) NOT NULL,
    Address TEXT NOT NULL,
    Phone_Number VARCHAR(10) NOT NULL UNIQUE,

    CONSTRAINT pk_Library PRIMARY KEY (BranchID),
    CONSTRAINT chk_BranchID CHECK (BranchID ~ '^LIBTECH[0-9]{2}$'),
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~ '^[0-9]{2}/[0-9]{6}$')
);
create table Staff (
    SSN VARCHAR(11),
    First_Name VARCHAR(20) NOT NULL,
    Last_Name VARCHAR(20) NOT NULL,
    DoB DATE,
    Blood_Type CHAR(3) NOT NULL CHECK (Blood_Type IN ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')),
    Address TEXT NOT NULL,
    Salary NUMERIC CHECK (Salary > 0),
    Post VARCHAR(20) NOT NULL,
    Super_SSN VARCHAR(11),
    St_Email VARCHAR(50),
    BranchID VARCHAR(10),
    Hours INTEGER CHECK (Hours >= 0),

    CONSTRAINT pk_Staff PRIMARY KEY (SSN),
    CONSTRAINT fk_Staff FOREIGN KEY (St_Email) REFERENCES Authentication_System(Email)
        ON UPDATE CASCADE
        ON DELETE SET NULL,
    CONSTRAINT fk_Staff FOREIGN KEY (BranchID) REFERENCES Library(BranchID)
        ON UPDATE CASCADE
        ON DELETE SET NULL,
    CONSTRAINT fk_Staff FOREIGN KEY (Super_SSN) REFERENCES Staff(SSN)
        ON UPDATE CASCADE
        ON DELETE SET NULL

);
create table Dependents (
    SSN VARCHAR(11) NOT NULL,
    Dep_Name VARCHAR(50) NOT NULL,
    Relationship VARCHAR(20) NOT NULL,
    Sex CHAR(1) NOT NULL CHECK (Sex IN ('M', 'F')),

    CONSTRAINT pk_Dependents PRIMARY KEY (SSN, Dep_Name),
    CONSTRAINT fk_Dependents FOREIGN KEY (SSN) REFERENCES Staff(SSN)
        ON UPDATE CASCADE
        ON DELETE CASCADE

);
create table Supplier (
    Name VARCHAR(50) NOT NULL,
    Address TEXT NOT NULL,
    Phone_Number VARCHAR(10) NOT NULL,
    
    CONSTRAINT pk_Supplier PRIMARY KEY (Name,Address),
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~ '^[0-9]{2}/[0-9]{6}$')
);
create table Publisher (
    Name VARCHAR(50) NOT NULL,
    Address TEXT NOT NULL,
    Phone_Number VARCHAR(10) NOT NULL,
    
    CONSTRAINT pk_Publisher PRIMARY KEY (Name),
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~ '^[0-9]{2}/[0-9]{6}$')

);

create table Items (
    Barcode VARCHAR(20) NOT NULL,
    Name VARCHAR(50) NOT NULL,
    Age_Group VARCHAR(10),
    Price NUMERIC NOT NULL CHECK (Price > 0),
    Genre VARCHAR(50),
    Supp_Name VARCHAR(50),
    Supp_Address TEXT,
    Qty_Supplied INTEGER NOT NULL CHECK (Qty_Supplied >= 0),
    Date_Supplied DATE NOT NULL,

    CONSTRAINT pk_Items PRIMARY KEY (Barcode),
    CONSTRAINT fk_Items FOREIGN KEY (Supp_Name) REFERENCES Supplier(Name)
        ON UPDATE CASCADE
        ON DELETE SET NULL
);

CREATE TABLE Books_for_Sale (
    ISBN CHAR(13) PRIMARY KEY,  
    Title VARCHAR(20) NOT NULL,
    Genre VARCHAR(20) NOT NULL,
    Price NUMERIC(10, 2) CONSTRAINT chk_Books_for_Sale_Price CHECK (Price > 0),  
    -- NUMERIC(10,2) allows values ranging from -99999999.99 to 99999999.99
    -- used for precise financial values to avoid rounding errors
    Translator VARCHAR(50),
    Edition INT CONSTRAINT chk_Books_for_Sale_Edition CHECK (Edition > 0) NOT NULL,  
    Pages INT CONSTRAINT chk_Books_for_Sale_Pages CHECK (Pages > 0) NOT NULL,  
    Language VARCHAR(20) NOT NULL,
    Publisher_Name VARCHAR(50) NOT NULL,  
    CONSTRAINT pk_Books_for_Sale PRIMARY KEY (ISBN),  
    CONSTRAINT fk_Books_for_Sale FOREIGN KEY (Publisher_Name) REFERENCES Publisher(Name) 
        ON UPDATE CASCADE 
        ON DELETE SET NULL  
);

CREATE TABLE Books_for_Rent (
    BookID VARCHAR(10) PRIMARY KEY,  --format (ISBN#ID)
    ISBN CHAR(13) NOT NULL UNIQUE,  
    Title VARCHAR(20) NOT NULL,
    Genre VARCHAR(20) NOT NULL,
    Price NUMERIC(10, 2) CONSTRAINT chk_Books_for_Rent_Price CHECK (Price > 0),  
    Translator VARCHAR(50),
    Edition INT CONSTRAINT chk_Books_for_Rent_Edition CHECK (Edition > 0) NOT NULL,  
    Pages INT CONSTRAINT chk_Books_for_Rent_Pages CHECK (Pages > 0) NOT NULL,  
    Language VARCHAR(20) NOT NULL,
    Publisher_Name VARCHAR(50) NOT NULL,  
    Shelf_No INT CONSTRAINT chk_Shelf_No CHECK (Shelf_No > 0),  
    Row_No INT CONSTRAINT chk_Row_No CHECK (Row_No > 0),  
    BranchID VARCHAR(10) NOT NULL UNIQUE,  

    CONSTRAINT pk_Books_for_Rent PRIMARY KEY (BookID),
    CONSTRAINT fk_Books_for_Rent_1 FOREIGN KEY (Publisher_Name) REFERENCES Publisher(Name) 
        ON UPDATE CASCADE ON DELETE SET NULL,  
    CONSTRAINT fk_Books_for_Rent_2 FOREIGN KEY (BranchID) REFERENCES Library(BranchID) 
        ON UPDATE CASCADE ON DELETE SET NULL
);


CREATE TABLE Authors_BookSale (
    ISBN CHAR(13) NOT NULL,  
    Author_Name VARCHAR(50) NOT NULL,  

    CONSTRAINT pk_Authors_BookSale PRIMARY KEY (ISBN, Author_Name),

    CONSTRAINT fk_Authors_BookSale FOREIGN KEY (ISBN) REFERENCES Books_for_Sale(ISBN) 
        ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE Authors_BookRent (
    BookID VARCHAR(10) NOT NULL,  
    Author_Name VARCHAR(50) NOT NULL, 

    CONSTRAINT pk_Authors_BookRent PRIMARY KEY (BookID, Author_Name),

    CONSTRAINT fk_Authors_BookRent FOREIGN KEY (BookID) REFERENCES Books_for_Rent(BookID) 
        ON UPDATE CASCADE ON DELETE CASCADE
);


create table Stores_Items (

);
create table Stores_Booksforsale (

);
create table Buys_Books (

);
create table Purchases_Items (

);
create table Borrows (

);
create table Sale_to_Rent (

);
