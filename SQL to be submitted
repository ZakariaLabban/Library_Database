CREATE TABLE Authentication_System ( 
	Email VARCHAR(50), 
	Passcode VARCHAR(20) NOT NULL, 
	CONSTRAINT pk_Authentication_System PRIMARY KEY (email), 
	CONSTRAINT chk_email CHECK ( 
	email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$' 
	), 

 
    CONSTRAINT chk_passcode CHECK (                                           
        passcode ~ '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^a-zA-Z0-9]).{1,}$' 
    ) 
    --the passcode must contain at least one upper and lower case and 1 number and 1 symbol 
    --the email should follow the standard format 
); 
create table Customer ( 
    Username VARCHAR(20), 
    Phone_Number VARCHAR(10) NOT NULL, 
    Address TEXT, 
    Sex CHAR(1) NOT NULL CHECK (Sex IN ('M', 'F')), 
    First_Name VARCHAR(20) NOT NULL, 
    Last_Name VARCHAR(20) NOT NULL, 
    Ct_Email VARCHAR(50) UNIQUE, 
     
    CONSTRAINT pk_Customer PRIMARY KEY (Username), 
    CONSTRAINT fk_Customer FOREIGN KEY (Ct_Email) REFERENCES Authentication_System(Email),
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~  '^[0-9]{2}/[0-9]{6}$' ) 
     
); 
create table Libraryy ( 
    BranchID VARCHAR(10) NOT NULL, 
    Address TEXT NOT NULL, 
    Phone_Number VARCHAR(10) NOT NULL UNIQUE, 
 
    CONSTRAINT pk_Libraryy PRIMARY KEY (BranchID), 
    CONSTRAINT chk_BranchID CHECK (BranchID ~ '^LIBTECH[0-9]{2}$'), 
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~ '^[0-9]{2}/[0-9]{6}$') 
); 
create table Staff ( 
    SSN VARCHAR(11), 
    First_Name VARCHAR(20) NOT NULL, 
    Last_Name VARCHAR(20) NOT NULL, 
    DoB DATE, 
    Blood_Type CHAR(3) NOT NULL CHECK (Blood_Type IN ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')), 
    Address TEXT NOT NULL, 
    Salary NUMERIC CHECK (Salary > 0), 
    Post TEXT NOT NULL, 
    Super_SSN VARCHAR(11), 
    St_Email VARCHAR(50) UNIQUE, 
    BranchID VARCHAR(10), 
    Hours INTEGER CHECK (Hours >= 0), 
 
    CONSTRAINT pk_Staff PRIMARY KEY (SSN), 
    CONSTRAINT fk_Staff_St_Email FOREIGN KEY (St_Email) REFERENCES Authentication_System(Email), 
    CONSTRAINT fk_Staff_BranchID FOREIGN KEY (BranchID) REFERENCES Libraryy(BranchID),
    CONSTRAINT fk_Staff_Super_SSN FOREIGN KEY (Super_SSN) REFERENCES Staff(SSN) 
); 
create table Dependents ( 
    SSN VARCHAR(11) NOT NULL, 
    Dep_Name VARCHAR(50) NOT NULL, 
    Relationship VARCHAR(20) NOT NULL, 
    Sex CHAR(1) NOT NULL CHECK (Sex IN ('M', 'F')), 
 
    CONSTRAINT pk_Dependents PRIMARY KEY (SSN, Dep_Name), 
 
    CONSTRAINT fk_Dependents FOREIGN KEY (SSN) REFERENCES Staff(SSN) 
        ON UPDATE CASCADE 
        ON DELETE CASCADE 
 
); 
create table Supplier ( 
    Supp_Name VARCHAR(50) NOT NULL UNIQUE, 
    Address TEXT NOT NULL, 
    Phone_Number VARCHAR(10) NOT NULL UNIQUE, 
     
    CONSTRAINT pk_Supplier PRIMARY KEY (Supp_Name,Address), 
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~ '^[0-9]{2}/[0-9]{6}$') 
); 
create table Publisher ( 
    Publisher_Name VARCHAR(50) NOT NULL, 
    Address TEXT NOT NULL, 
    Phone_Number VARCHAR(10) NOT NULL UNIQUE, 
     
    CONSTRAINT pk_Publisher PRIMARY KEY (Publisher_Name), 
    CONSTRAINT chk_Phone_Number CHECK (Phone_Number ~ '^[0-9]{2}/[0-9]{6}$') 
 
); 
 
create table Items ( 
    Barcode VARCHAR(16) NOT NULL, 
    Items_Name VARCHAR(50) NOT NULL, 
    Age_Group VARCHAR(10), 
    Price NUMERIC NOT NULL CHECK (Price > 0), 
    Genre TEXT, 
    Supp_Name VARCHAR(50), 
    Supp_Address TEXT, 
    Qty_Supplied INTEGER NOT NULL CHECK (Qty_Supplied >= 0), 
    Date_Supplied DATE NOT NULL, 
 
    CONSTRAINT pk_Items PRIMARY KEY (Barcode), 
    CONSTRAINT fk_Items FOREIGN KEY (Supp_Name) REFERENCES Supplier(Supp_Name)  
); 
 
CREATE TABLE Books_for_Sale ( 
    ISBN CHAR(13) NOT NULL,   
    Title TEXT NOT NULL, 
    Genre TEXT NOT NULL, 
    Price NUMERIC(10, 2) NOT NULL CHECK (Price > 0),   
    -- NUMERIC(10,2) allows values ranging from -99999999.99 to 99999999.99 
    -- used for precise financial values to avoid rounding errors 
    Translator VARCHAR(50), 
    Edition INT NOT NULL CHECK (Edition > 0),   
    Pages INT NOT NULL CHECK(Pages > 0) ,   
    Lang VARCHAR(40) NOT NULL, 
    Publisher_Name VARCHAR(50),   
    CONSTRAINT pk_Books_for_Sale PRIMARY KEY (ISBN),   
    CONSTRAINT fk_Books_for_Sale FOREIGN KEY (Publisher_Name) REFERENCES Publisher(Publisher_Name)   
); 
 
CREATE TABLE Books_for_Rent ( 
    BookID VARCHAR(17) NOT NULL,  --format (ISBN#ID) 
    ISBN CHAR(13) NOT NULL,   
    Title TEXT NOT NULL, 
    Genre TEXT NOT NULL, 
    Price NUMERIC(10, 2) NOT NULL CHECK (Price > 0),   
    Translator VARCHAR(50), 
    Edition INT NOT NULL CHECK (Edition > 0) ,   
    Pages INT NOT NULL CHECK (Pages > 0),   
    Lang VARCHAR(40) NOT NULL, 
    Publisher_Name VARCHAR(50),   
    Shelf_No INT NOT NULL CHECK (Shelf_No > 0),   
    Row_No INT NOT NULL CHECK (Row_No > 0),   
    BranchID VARCHAR(10),   
 
    CONSTRAINT pk_Books_for_Rent PRIMARY KEY (BookID), 
    CONSTRAINT fk_Books_for_Rent_Publisher_Name FOREIGN KEY (Publisher_Name) REFERENCES 
	Publisher(Publisher_Name),  
    CONSTRAINT fk_Books_for_Rent_BranchID FOREIGN KEY (BranchID) REFERENCES Libraryy(BranchID) 
); 
 
 
CREATE TABLE Authors_BookSale ( 
    ISBN CHAR(13) NOT NULL,   
    Author_Name VARCHAR(50) NOT NULL,   
 
    CONSTRAINT pk_Authors_BookSale PRIMARY KEY (ISBN, Author_Name), 
 
    CONSTRAINT fk_Authors_BookSale FOREIGN KEY (ISBN) REFERENCES Books_for_Sale(ISBN)  
); 
 
CREATE TABLE Authors_BookRent ( 
    BookID VARCHAR(17) NOT NULL,   
    Author_Name VARCHAR(50) NOT NULL,  
 
    CONSTRAINT pk_Authors_BookRent PRIMARY KEY (BookID, Author_Name), 
 
 
    CONSTRAINT fk_Authors_BookRent FOREIGN KEY (BookID) REFERENCES Books_for_Rent(BookID)
); 
 
 
CREATE TABLE Stores_Items ( 
    BranchID VARCHAR(10) NOT NULL,   
    Barcode VARCHAR(16) NOT NULL,   
    Qty_Stored INT NOT NULL CHECK (Qty_Stored >= 0),   
 
    CONSTRAINT pk_Stores_Items PRIMARY KEY (BranchID, Barcode), 
 
    CONSTRAINT fk_Stores_Items FOREIGN KEY (BranchID) REFERENCES Libraryy(BranchID) 
); 
 
 
create table Stores_Booksforsale ( 
    BranchID VARCHAR(10) NOT NULL,   
    ISBN CHAR(13) NOT NULL,   
    Number_of_Copies INT NOT NULL CHECK (Number_of_Copies >= 0),   
 
    CONSTRAINT pk_Stores_Booksforsale PRIMARY KEY (BranchID, ISBN), 
 
    CONSTRAINT fk_Stores_Booksforsale_BranchID FOREIGN KEY (BranchID) REFERENCES Libraryy(BranchID),
 
    CONSTRAINT fk_Stores_Booksforsale_ISBN FOREIGN KEY (ISBN) REFERENCES Books_for_Sale(ISBN)
 
); 
 
create table Buys_Books ( 
    Username VARCHAR(20) NOT NULL,   
    BranchID VARCHAR(10) NOT NULL,   
    ISBN CHAR(13) NOT NULL,   
    Quantity INT NOT NULL CHECK (Quantity >= 0),   
    Date_Time TIMESTAMP NOT NULL,   
 
    CONSTRAINT pk_Buys_Books PRIMARY KEY (Username, BranchID, ISBN, Date_Time), 
 
    CONSTRAINT fk_Buys_Books_Customer FOREIGN KEY (Username) REFERENCES Customer(Username),
 
    CONSTRAINT fk_Buys_Books_BranchID FOREIGN KEY (BranchID) REFERENCES Libraryy(BranchID), 
 
    CONSTRAINT fk_Buys_Books_ISBN FOREIGN KEY (ISBN) REFERENCES Books_for_Sale(ISBN) 
); 
 
create table Purchases_Items ( 
    Username VARCHAR(20) NOT NULL,   
    BranchID VARCHAR(10) NOT NULL,   
    Barcode VARCHAR(16) NOT NULL,   
    Quantity INT NOT NULL CHECK (Quantity >= 0),   
    Date_Time TIMESTAMP NOT NULL,   
 
    CONSTRAINT pk_Purchases_Items PRIMARY KEY (Username, BranchID, Barcode, Date_Time), 
 
    CONSTRAINT fk_Purchases_Items_Username FOREIGN KEY (Username) REFERENCES Customer(Username),
 
    CONSTRAINT fk_Purchases_Items_BranchID FOREIGN KEY (BranchID) REFERENCES Libraryy(BranchID), 
 
    CONSTRAINT fk_Purchases_Items_Barcode FOREIGN KEY (Barcode) REFERENCES Items(Barcode) 
); 
create table Borrows ( 
    Username VARCHAR(20) NOT NULL,   
    BookID VARCHAR(17) NOT NULL,   
    Date_Out DATE NOT NULL,   
    Due_Date DATE NOT NULL,   
    Penalty DECIMAL(10, 2) DEFAULT 0 CHECK (Penalty >= 0),   
    Status VARCHAR(10) NOT NULL,
 
    CONSTRAINT pk_Borrows PRIMARY KEY (Username, BookID, Date_Out), 
 
    CONSTRAINT fk_Borrows_Username FOREIGN KEY (Username) REFERENCES Customer(Username) ,
 
    CONSTRAINT fk_Borrows_BookID FOREIGN KEY (BookID) REFERENCES Books_for_Rent(BookID) 
); 
create table Sale_to_Rent ( 
     
    BookID VARCHAR(17) NOT NULL,   
    ISBN CHAR(13) NOT NULL,   
    Date_Moved DATE NOT NULL,   
    Discount DECIMAL(5, 2) DEFAULT 0 CHECK (Discount >= 0 AND Discount <= 100),   --discount is % 
 
    CONSTRAINT pk_Sale_to_Rent PRIMARY KEY (BookID,ISBN), 
 
    CONSTRAINT fk_Sale_to_Rent_BookID FOREIGN KEY (BookID) REFERENCES Books_for_Rent(BookID),
 
	CONSTRAINT fk_Sale_to_Rent_ISBN FOREIGN KEY (ISBN) REFERENCES Books_for_Sale(ISBN) 
); 

--insertion of data
INSERT INTO Authentication_System (Email, Passcode) VALUES
    ('elias.nasr@gmail.com', 'Nasr321#'),
    ('elie.salameh@gmail.com', 'passElie56&'),
    ('fouad.maalouf@gmail.com', 'Fouadex231%'),
    ('georges.hareb@gmail.com', 'Passgeorges4*5'),
    ('jad.barakat@gmail.com', 'Passjadbarakat*t2'),
    ('joelle.fares@gmail.com', 'Jojo9024%'),
    ('nadine.mabsout@gmail.com', 'Nadoume2mabsout#@'),
    ('nour.najjar@gmail.com', 'najjarNour@1w'),
    ('ramzi.haddad@gmail.com', 'Rh45362@#'),
    ('rima.halabieh@gmail.com', 'Halabiehrima@32'),
    ('jb89@gmail.com', 'PassJB@123'),
    ('dk176@gmail.com', 'DK176Pass#'),
    ('ls098@gmail.com', 'Ls#Secure9'),
    ('mn56@gmail.com', 'Mn56Pass$'),
    ('mk56@gmail.com', 'Mk#56987'),
    ('wf02@gmail.com', 'WF02!Pass'),
    ('as67@gmail.com', 'AS67Secure@'),
    ('ns09@gmail.com', 'NS09#Pass'),
    ('rm12@gmail.com', 'Rm12Safe@'),
    ('rt65@gmail.com', 'RT65Pass!'),
    ('hassan.abboud@gmail.com', 'Hassan@Abb123'),
    ('fatima.moussa@gmail.com', 'FatimaMoussa@54'),
    ('tarek.darwish@gmail.com', 'TarekD#764'),
    ('amira.abdelrahman@gmail.com', 'AmiraRahman@89'),
    ('sami.chahine@gmail.com', 'SamiC!5432'),
    ('hana.elkhoury@gmail.com', 'Hana@Khoury21'),
    ('khaled.hajjar@gmail.com', 'HajjarKhaled#77'),
    ('layla.salem@gmail.com', 'LaylaS@13#'),
    ('marwan.daher@gmail.com', 'MarwanDaher@98'),
    ('sara.jalloul@gmail.com', 'SaraJ!53@2'),
    ('nizar.issa@gmail.com', 'IssaNizar#68'),
    ('dina.ghandour@gmail.com', 'Dina@Ghand87'),
    ('ahmad.kassem@gmail.com', 'KassemAhmad!92'),
    ('reem.abouzeid@gmail.com', 'ReemAZ@34!'),
    ('mohammad.farhat@gmail.com', 'Mohammad@Fh43'),
    ('leila.omari@gmail.com', 'LeilaOmari#66'),
    ('hadi.ziadeh@gmail.com', 'HadiZ@7854'),
    ('yasmeen.mirza@gmail.com', 'YasmeenMirza!09'),
    ('omar.bazzi@gmail.com', 'Omar@Bazzi44'),
    ('ghada.saad@gmail.com', 'GhadaSaad@23'),
    ('zainab.abdallah@gmail.com', 'Zainab@Abdallah12'),
    ('mahmoud.jaber@gmail.com', 'MahmoudJaber#88'),
    ('karim.ouwayda@gmail.com', 'KarimOuwayda@77'),
    ('salma.rajab@gmail.com', 'SalmaR@56!'),
    ('fadi.sabbagh@gmail.com', 'FadiSabbagh@43'),
    ('rana.daher@gmail.com', 'Rana@Daher99'),
    ('youssef.nahhas@gmail.com', 'YoussefN!1234');


INSERT INTO Customer (Username, Phone_Number, Address, Sex, First_Name, Last_Name, Ct_Email) VALUES
    ('en01', '71/812354', 'Tripoli, Mina', 'M', 'Elias', 'Nasr', 'elias.nasr@gmail.com'),
    ('gh21', '76/123765', 'Baabda, Hazmieh', 'M', 'Georges', 'Hareb', 'georges.hareb@gmail.com'),
    ('jf10', '81/209453', 'Baalback, Kaa', 'F', 'Joelle', 'Fares', 'joelle.fares@gmail.com'),
    ('fm02', '70/231539', 'Jbeil, Edde', 'M', 'Fouad', 'Maalouf', 'fouad.maalouf@gmail.com'),
    ('jb01', '03/356472', 'Beirut, Verdun', 'M', 'Jad', 'Barakat', 'jad.barakat@gmail.com'),
    ('nn12', '78/324536', 'Zahle, Ksara', 'F', 'Nour', 'Najjar', 'nour.najjar@gmail.com'),
    ('rh17', '03/564992', 'Saida, Taameer', 'M', 'Ramzi', 'Haddad', 'ramzi.haddad@gmail.com'),
    ('rh18', '76/172321', 'Beirut, Raouche', 'F', 'Rima', 'Halabieh', 'rima.halabieh@gmail.com'),
    ('es02', '71/342764', 'Beirut, Verdun', 'M', 'Elie', 'Salameh', 'elie.salameh@gmail.com'),
    ('nm01', '78/876520', 'Beirut, Hamra', 'F', 'Nadine', 'Mabsout', 'nadine.mabsout@gmail.com'),
    ('ha01', '71/432156', 'Beirut, Ashrafieh', 'M', 'Hassan', 'Abboud', 'hassan.abboud@gmail.com'),
    ('fm12', '76/985432', 'Saida, Sidon', 'F', 'Fatima', 'Moussa', 'fatima.moussa@gmail.com'),
    ('td21', '03/765421', 'Tripoli, Maarad', 'M', 'Tarek', 'Darwish', 'tarek.darwish@gmail.com'),
    ('aa22', '81/543219', 'Zahle, Taanayel', 'F', 'Amira', 'Abdelrahman', 'amira.abdelrahman@gmail.com'),
    ('sc34', '70/764132', 'Batroun, Koubba', 'M', 'Sami', 'Chahine', 'sami.chahine@gmail.com'),
    ('he01', '78/231654', 'Jounieh, Sarba', 'F', 'Hana', 'Elkhoury', 'hana.elkhoury@gmail.com'),
    ('kh18', '03/124563', 'Tyre, Borj Al-Shamali', 'M', 'Khaled', 'Hajjar', 'khaled.hajjar@gmail.com'),
    ('ls99', '71/786543', 'Bchamoun, Khaldeh', 'F', 'Layla', 'Salem', 'layla.salem@gmail.com'),
    ('md21', '03/943215', 'Byblos, Aamchit', 'M', 'Marwan', 'Daher', 'marwan.daher@gmail.com'),
    ('sj01', '70/978654', 'Jezzine, Wadi Jezzine', 'F', 'Sara', 'Jalloul', 'sara.jalloul@gmail.com');

INSERT INTO Libraryy (BranchID, Address, Phone_Number) VALUES
    ('LIBTECH01', 'Hamra', '01/412344'),
    ('LIBTECH02', 'Mazraa', '01/513478'),
    ('LIBTECH03', 'Jal El Dib', '04/234432'),
    ('LIBTECH04', 'Jounieh', '04/512987'),
    ('LIBTECH05', 'Jbeil', '08/212121'),
    ('LIBTECH06', 'Tripoli', '08/787654'),
    ('LIBTECH07', 'Zahle', '09/128220'),
    ('LIBTECH08', 'Saida', '07/987098'),
    ('LIBTECH09', 'Nabatieh', '07/565890'),
    ('LIBTECH10', 'Tyre', '07/987911'),
    ('LIBTECH11', 'Beirut Central District', '01/123456'),
    ('LIBTECH12', 'Achrafieh', '01/654321'),
    ('LIBTECH13', 'Baabda', '05/456789'),
    ('LIBTECH14', 'Batroun', '06/987654'),
    ('LIBTECH15', 'Broummana', '04/345678');



INSERT INTO Staff (SSN, First_Name, Last_Name, DoB, Blood_Type, Address, Salary, Post, Super_SSN, St_Email, BranchID, Hours) VALUES
    ('123-45-6789', 'Jad', 'Bader', '1992-10-02', 'B+', 'Zahle', 3850, 'Manager', NULL, 'jb89@gmail.com', 'LIBTECH01', 40),
    ('234-56-7890', 'Dani', 'Kanaan', '2000-02-28', 'O-', 'Beirut', 2500, 'Librarian', '123-45-6789', 'dk176@gmail.com', 'LIBTECH01', 50),
    ('345-67-8901', 'Lama', 'Saab', '2001-01-22', 'A-', 'Beirut', 2300, 'Librarian', '123-45-6789', 'ls098@gmail.com', 'LIBTECH01', 60),
    ('456-78-9012', 'Mona', 'Ramadan', '1998-05-16', 'A+', 'Saida', 1000, 'Clerk', '345-67-8901', 'mn56@gmail.com', 'LIBTECH01', 60),
    ('567-89-0123', 'Marwan', 'Kodeih', '1987-07-07', 'B-', 'Jbeil', 3000, 'Librarian', NULL, 'mk56@gmail.com', 'LIBTECH03', 45),
    ('678-90-1234', 'Wael', 'Fattouh', '1992-12-10', 'B+', 'Tyr', 2850, 'Librarian', '567-89-0123', 'wf02@gmail.com', 'LIBTECH03', 50),
    ('789-01-2345', 'Adam', 'Serhan', '2000-11-25', 'O+', 'Saida', 2500, 'Librarian', '678-90-1234', 'as67@gmail.com', 'LIBTECH05', 55),
    ('890-12-3456', 'Noura', 'Succar', '1997-04-04', 'AB+', 'Beirut', 2000, 'Clerk', '789-01-2345', 'ns09@gmail.com', 'LIBTECH05', 50),
    ('901-23-4567', 'Reem', 'Karam', '2000-09-09', 'AB-', 'BaaLIBTECHack', 1850, 'Librarian', '567-89-0123', 'rm12@gmail.com', 'LIBTECH05', 45),
    ('112-34-5678', 'Hassan', 'Abboud', '1985-06-12', 'O+', 'Beirut', 4200, 'Manager', NULL, 'hassan.abboud@gmail.com', 'LIBTECH11', 40),
    ('223-45-6789', 'Fatima', 'Moussa', '1993-07-15', 'A+', 'Saida', 2800, 'Librarian', '112-34-5678', 'fatima.moussa@gmail.com', 'LIBTECH11', 50),
    ('334-56-7890', 'Tarek', 'Darwish', '1988-03-10', 'B+', 'Tripoli', 4000, 'Manager', NULL, 'tarek.darwish@gmail.com', 'LIBTECH12', 45),
    ('445-67-8901', 'Amira', 'Abdelrahman', '1991-11-20', 'AB-', 'Batroun', 2900, 'Librarian', '334-56-7890', 'amira.abdelrahman@gmail.com', 'LIBTECH12', 50),
    ('556-78-9012', 'Sami', 'Chahine', '1982-02-02', 'O-', 'Jbeil', 4500, 'Manager', NULL, 'sami.chahine@gmail.com', 'LIBTECH13', 40),
    ('667-89-0123', 'Hana', 'Elkhoury', '1995-08-18', 'B-', 'Byblos', 2500, 'Librarian', '556-78-9012', 'hana.elkhoury@gmail.com', 'LIBTECH13', 50),
    ('778-90-1234', 'Khaled', 'Hajjar', '1987-04-25', 'A-', 'Baabda', 4700, 'Manager', NULL, 'khaled.hajjar@gmail.com', 'LIBTECH14', 40),
    ('889-01-2345', 'Layla', 'Salem', '1994-12-12', 'O+', 'Broummana', 2700, 'Librarian', '778-90-1234', 'layla.salem@gmail.com', 'LIBTECH14', 45),
    ('990-12-3456', 'Marwan', 'Daher', '1989-01-01', 'AB+', 'Achrafieh', 3900, 'Manager', NULL, 'marwan.daher@gmail.com', 'LIBTECH15', 45),
    ('101-23-4567', 'Sara', 'Jalloul', '1996-06-06', 'B+', 'Zahle', 2800, 'Librarian', '990-12-3456', 'sara.jalloul@gmail.com', 'LIBTECH15', 50);


INSERT INTO Dependents (SSN, Dep_Name, Relationship, Sex) VALUES
    ('123-45-6789', 'Sawsan', 'wife', 'F'),
    ('123-45-6789', 'Mohamad', 'son', 'M'),
    ('234-56-7890', 'Tia', 'wife', 'F'),
    ('345-67-8901', 'Akram', 'spouse', 'M'),
    ('456-78-9012', 'Zach', 'father', 'M'),
    ('567-89-0123', 'Samira', 'mother', 'F'),
    ('890-12-3456', 'Adam', 'spouse', 'M'),
    ('890-12-3456', 'Roy', 'son', 'M'),
    ('901-23-4567', 'Joyce', 'mother', 'F'),
    ('901-23-4567', 'Georges', 'father', 'M'),
    ('112-34-5678', 'Laila', 'wife', 'F'),
    ('112-34-5678', 'Ahmad', 'son', 'M'),
    ('112-34-5678', 'Maya', 'daughter', 'F'),
    ('223-45-6789', 'Salim', 'father', 'M'),
    ('445-67-8901', 'Rami', 'brother', 'M'),
    ('445-67-8901', 'Nour', 'sister', 'F'),
    ('556-78-9012', 'Fatima', 'wife', 'F'),
    ('778-90-1234', 'Lama', 'daughter', 'F'),
    ('778-90-1234', 'Raya', 'daughter', 'F'),
    ('889-01-2345', 'Youssef', 'son', 'M'),
    ('990-12-3456', 'Sami', 'father', 'M'),
    ('990-12-3456', 'Nadine', 'mother', 'F'),
    ('101-23-4567', 'Jad', 'brother', 'M'),
    ('101-23-4567', 'Rita', 'sister', 'F'),
    ('101-23-4567', 'Hala', 'mother', 'F');


INSERT INTO Supplier (Supp_Name, Address, Phone_Number) VALUES
    ('Najjar', 'Beirut', '01/255412'),
    ('KhouryHome', 'Beirut', '01/453123'),
    ('AbedTahhan', 'Beirut', '01/879034'),
    ('HamdanElectronics', 'Beirut', '01/334455'),
    ('DVDhome', 'Saida', '07/565432'),
    ('Maped', 'Beirut', '01/776853'),
    ('JoueClub', 'Beirut', '01/212343'),
    ('Crafts&More', 'Jounieh', '04/312366'),
    ('Virgin', 'Jounieh', '04/565723'),
    ('ReadPlus', 'Zahle', '09/623657'),
    ('OfficeOne', 'Beirut', '01/223344'),
    ('ModernStationery', 'Tripoli', '06/554432'),
    ('TechZone', 'Beirut', '01/889900'),
    ('Art&CraftWorld', 'Byblos', '04/443322'),
    ('GadgetStore', 'Beirut', '01/667788'),
    ('StationeryHub', 'Saida', '07/123456'),
    ('BookPalace', 'Tyre', '07/334455'),
    ('SmartOffice', 'Beirut', '01/990088'),
    ('ClassySupplies', 'Jbeil', '09/445566'),
    ('Libra', 'Batroun', '06/778899');

INSERT INTO Items (Barcode, Items_Name, Age_Group, Price, Genre, Supp_Name, Supp_Address, Qty_Supplied, Date_Supplied)
VALUES
('0000000000010001', 'Puzzle', '5-12', 50.00, 'Toys', 'JoueClub', 'Beirut', 100, '2024-10-20'),
('0000000000020198', 'Maped Pencil', NULL, 2.50, 'Stationery', 'Maped', 'Beirut', 250, '2024-10-10'),
('0000000000020290', 'Maped Eraser', NULL, 2.00, 'Stationery', 'Maped', 'Beirut', 250, '2024-10-10'),
('0000000000030278', 'Frozen', '4-14', 10.00, 'DVD', 'DVDhome', 'Saida', 40, '2024-09-25'),
('0000000000030240', 'Spy', '18+', 10.00, 'DVD', 'DVDhome', 'Saida', 40, '2024-09-25'),
('0000000000030560', 'Spiderman', '6+', 10.00, 'DVD', 'DVDhome', 'Saida', 40, '2024-09-26'),
('0000000000040134', 'GtaV', '18+', 25.00, 'Games', 'Najjar', 'Beirut', 150, '2023-02-20'),
('0000000000040250', 'Fifa24', NULL, 25.00, 'Games', 'Najjar', 'Beirut', 400, '2023-11-11'),
('0000000000040255', 'Uncharted3', '16+', 25.00, 'Games', 'Najjar', 'Beirut', 100, '2024-05-31'),
('0000000000040300', 'Fifa23', NULL, 25.00, 'Games', 'Najjar', 'Beirut', 120, '2024-01-05'),
('0000000000050001', 'Smartwatch', NULL, 199.99, 'Electronics', 'GadgetStore', 'Beirut', 50, '2024-10-15'),
('0000000000050002', 'Bluetooth Speaker', '10+', 49.99, 'Electronics', 'GadgetStore', 'Beirut', 75, '2024-11-01'),
('0000000000060003', 'Mechanical Keyboard', '12+', 99.99, 'Electronics', 'TechZone', 'Beirut', 60, '2024-08-20'),
('0000000000060004', 'Gaming Mouse', '12+', 39.99, 'Electronics', 'TechZone', 'Beirut', 100, '2024-08-20'),
('0000000000070005', '3D Puzzle', '6+', 29.99, 'Toys', 'ClassySupplies', 'Jounieh', 40, '2024-09-05'),
('0000000000070006', 'Paint Set', '8+', 15.00, 'Art Supplies', 'ClassySupplies', 'Jounieh', 50, '2024-09-10'),
('0000000000080007', 'Notebook Pack', '12+', 10.00, 'Stationery', 'ReadPlus', 'Zahle', 200, '2024-07-01'),
('0000000000090008', 'USB-C Adapter', NULL, 19.99, 'Electronics', 'TechZone', 'Beirut', 120, '2024-11-15'),
('0000000000100009', 'Action Figure', '8+', 25.00, 'Toys', 'JoueClub', 'Beirut', 100, '2024-10-10'),
('0000000000110010', 'Coloring Book', '4+', 5.99, 'Books', 'ReadPlus', 'Zahle', 250, '2024-05-15'),
('0000000000120011', 'Wireless Charger', NULL, 29.99, 'Electronics', 'GadgetStore', 'Beirut', 80, '2024-12-01'),
('0000000000130012', 'Kids Backpack', '6+', 35.00, 'School Supplies', 'ClassySupplies', 'Jounieh', 60, '2024-03-01'),
('0000000000140013', 'Watercolor Paint Set', '10+', 20.00, 'Art Supplies', 'Crafts&More', 'Jounieh', 90, '2024-04-10'),
('0000000000150014', 'Graphic Novel', '15+', 12.00, 'Books', 'ReadPlus', 'Zahle', 180, '2024-06-20'),
('0000000000160015', 'Puzzle Game', '5+', 15.99, 'Toys', 'Virgin', 'Jounieh', 50, '2024-05-25'),
('0000000000170016', 'Highlighters', NULL, 8.99, 'Stationery', 'OfficeOne', 'Beirut', 300, '2024-10-01'),
('0000000000180017', 'LED Desk Lamp', NULL, 59.99, 'Electronics', 'TechZone', 'Beirut', 70, '2024-11-12'),
('0000000000190018', 'Erasable Markers', '6+', 12.99, 'Art Supplies', 'Crafts&More', 'Jounieh', 110, '2024-03-30'),
('0000000000200019', 'DIY Craft Kit', '8+', 18.99, 'Toys', 'JoueClub', 'Beirut', 90, '2024-10-05'),
('0000000000210020', 'Fiction Novel', '16+', 14.99, 'Books', 'ReadPlus', 'Zahle', 150, '2024-06-15');


INSERT INTO Publisher (Publisher_Name, Address, Phone_Number)
VALUES
('Dar Al-Kitaba', 'Beirut,Hamra', '03/355097'),
('Dar Al-Nour', 'Mount Lebanon,Aley', '71/232156'),
('Lebanon Readings', 'Beirut, Cola', '76/876425'),
('Dar Al-Nasher', 'Jounieh', '03/436352'),
('Today News', 'Beirut', '09/824262'),
('Dar Al-Balad', 'Saida', '81/423536'),
('Dar Al-Maarifa', 'Nabatieh', '07/634562'),
('Dar Al-Fikr', 'Tripoli', '09/643225'),
('WassupLebanon', 'Jbeil', '71/232321'),
('Dar Al-Salam', 'Beirut', '81/123333'),
('Dar Al-Turath', 'Beirut, Verdun', '01/987654'),
('Dar Al-Hekma', 'Mount Lebanon, Broummana', '04/667788'),
('Kalimat Lebanon', 'Byblos', '09/776655'),
('Dar Al-Adab', 'Saida, Sidon', '07/554433'),
('Dar Al-Hayat', 'Tripoli, Mina', '06/778899'),
('Dar Al-Watan', 'Zahle, Bekaa', '08/667788'),
('Al-Qalam', 'Beirut, Ashrafieh', '01/445566'),
('Dar Al-Manar', 'Tyre, Rachidiyeh', '07/334455'),
('Al-Maktaba', 'Batroun', '06/223344'),
('Dar Al-Risala', 'Saida, Abra', '07/112233');


INSERT INTO Books_for_Sale (ISBN, Title, Genre, Price, Translator, Edition, Pages, Lang, Publisher_Name)
VALUES
('0000000002431', 'Electronics', 'Engineering', 89.00, NULL, 3, 356, 'English', 'Dar Al-Fikr'),
('0000000003421', 'Alg&Geo', 'Maths', 24.50, NULL, 1, 87, 'English', 'Dar Al-Fikr'),
('0000000004562', 'LearnArbic', 'Literature', 30.00, 'Asmaa Karam', 2, 102, 'Arabic', 'Dar Al-Salam'),
('0000000004989', 'MenDuties', 'Psychology', 35.50, NULL, 1, 234, 'English', 'Dar Al-Balad'),
('0000000005232', 'GirlsPower', 'Psychology', 120.00, NULL, 1, 675, 'English', 'WassupLebanon'),
('0000000005900', 'LifeonEarth', 'Geography', 100.00, NULL, 4, 200, 'English', 'Today News'),
('0000000006113', 'Voila', 'Literature', 31.25, 'Karim Akram', 5, 150, 'French', 'Dar Al-Salam'),
('0000000006772', 'Quand?', 'Literature', 76.25, 'Yolga Safa', 2, 89, 'French', 'Dar Al-Maarifa'),
('0000000007880', 'Seniorita', 'Literature', 55.00, 'Monica Smith', 1, 56, 'Spanish', 'Dar Al-Fikr'),
('0000000007994', 'Wander', 'Geography', 46.00, 'Sandra Kenaan', 1, 89, 'English', 'Dar Al-Balad'),
('0000000010001', 'Physics Basics', 'Science', 45.00, NULL, 3, 300, 'English', 'Dar Al-Kitaba'),
('0000000011002', 'Calculus 101', 'Maths', 60.00, NULL, 1, 400, 'English', 'Dar Al-Nasher'),
('0000000012003', 'Modern Poetry', 'Literature', 20.00, 'Lina Masri', 2, 120, 'Arabic', 'Dar Al-Turath'),
('0000000013004', 'Business Growth', 'Business', 75.00, NULL, 1, 250, 'English', 'Dar Al-Hekma'),
('0000000014005', 'Graphic Design', 'Arts', 85.00, NULL, 4, 320, 'English', 'Kalimat Lebanon'),
('0000000015006', 'Interior Decor', 'Arts', 70.00, NULL, 3, 180, 'English', 'Dar Al-Adab'),
('0000000016007', 'Molecular Biology', 'Science', 120.00, NULL, 2, 500, 'English', 'Dar Al-Hayat'),
('0000000017008', 'Civilizations', 'History', 95.00, NULL, 5, 400, 'English', 'Dar Al-Watan'),
('0000000018009', 'Perspectives', 'Philosophy', 50.00, NULL, 1, 200, 'English', 'Al-Qalam'),
('0000000019001', 'Marketing 101', 'Business', 65.00, NULL, 1, 300, 'English', 'Dar Al-Manar'),
('0000000020002', 'Astronomy', 'Science', 110.00, NULL, 4, 350, 'English', 'Dar Al-Risala'),
('0000000021003', 'Mediterranean Cooking', 'Cooking', 55.00, 'Jana Khalil', 1, 180, 'English', 'Dar Al-Maarifa'),
('0000000022004', 'Italian Recipes', 'Cooking', 65.00, 'Marco Rossi', 2, 220, 'Italian', 'Today News'),
('0000000023005', 'Arabic Calligraphy', 'Arts', 40.00, 'Nour Hassan', 1, 150, 'Arabic', 'Dar Al-Balad'),
('0000000024006', 'Digital Marketing', 'Business', 80.00, NULL, 2, 270, 'English', 'Dar Al-Hekma'),
('0000000025007', 'Big Data Analysis', 'Technology', 95.00, NULL, 3, 320, 'English', 'Kalimat Lebanon'),
('0000000026008', 'Artificial Intelligence', 'Technology', 120.00, NULL, 4, 450, 'English', 'Dar Al-Fikr'),
('0000000027009', 'Cybersecurity', 'Technology', 85.00, NULL, 2, 280, 'English', 'Lebanon Readings'),
('0000000028001', 'Yoga for Beginners', 'Health', 30.00, NULL, 1, 150, 'English', 'Dar Al-Salam'),
('0000000029002', 'Mindfulness', 'Health', 40.00, NULL, 1, 200, 'English', 'WassupLebanon'),
('0000000030003', 'Machine Learning Basics', 'Technology', 125.00, NULL, 3, 350, 'English', 'Dar Al-Kitaba'),
('0000000031004', 'The Art of Negotiation', 'Business', 75.00, NULL, 2, 240, 'English', 'Dar Al-Hekma'),
('0000000032005', 'Quantum Physics Explained', 'Science', 130.00, NULL, 5, 400, 'English', 'Dar Al-Manar'),
('0000000033006', 'Design Thinking', 'Business', 85.00, NULL, 2, 280, 'English', 'Kalimat Lebanon'),
('0000000034007', 'Ancient Cultures', 'History', 90.00, NULL, 3, 320, 'English', 'Dar Al-Risala'),
('0000000035008', 'Data Science Advanced', 'Technology', 115.00, NULL, 4, 420, 'English', 'Lebanon Readings'),
('0000000036009', 'Cooking for Kids', 'Cooking', 45.00, 'Nadia Abed', 1, 120, 'English', 'Dar Al-Maarifa'),
('0000000037001', 'World Mythologies', 'History', 99.00, NULL, 4, 350, 'English', 'Today News');


INSERT INTO Books_for_Rent (BookID, ISBN, Title, Genre, Price, Translator, Edition, Pages, Lang, Publisher_Name, Shelf_No, Row_No, BranchID)
VALUES
('0000000002431#001', '0000000002431', 'Electronics', 'Engineering', 10.00, NULL, 3, 356, 'English', 'Dar Al-Fikr', 25, 1, 'LIBTECH01'),
('0000000003421#012', '0000000003421', 'Alg&Geo', 'Maths', 10.00, NULL, 1, 87, 'English', 'Dar Al-Fikr', 12, 3, 'LIBTECH01'),
('0000000004562#012', '0000000004562', 'LearnArbic', 'Literature', 15.00, 'Asmaa Karam', 2, 102, 'Arabic', 'Dar Al-Salam', 12, 5, 'LIBTECH02'),
('0000000004989#023', '0000000004989', 'MenDuties', 'Psychology', 12.00, NULL, 1, 234, 'English', 'Dar Al-Balad', 16, 4, 'LIBTECH05'),
('0000000005232#003', '0000000005232', 'GirlsPower', 'Psychology', 70.00, NULL, 1, 675, 'English', 'WassupLebanon', 17, 6, 'LIBTECH05'),
('0000000005900#002', '0000000005900', 'LifeonEarth', 'Geography', 80.00, NULL, 4, 200, 'English', 'Today News', 02, 2, 'LIBTECH06'),
('0000000006113#020', '0000000006113', 'Voila', 'Literature', 15.00, 'Karim Akram', 5, 150, 'French', 'Dar Al-Salam', 13, 4, 'LIBTECH07'),
('0000000006772#012', '0000000006772', 'Quand?', 'Literature', 20.00, 'Yolga Safa', 2, 89, 'French', 'Dar Al-Maarifa', 19, 1, 'LIBTECH02'),
('0000000007880#001', '0000000007880', 'Seniorita', 'Literature', 25.00, 'Monica Smith', 1, 56, 'Spanish', 'Dar Al-Fikr', 19, 3, 'LIBTECH02'),
('0000000007994#010', '0000000007994', 'Wander', 'Geography', 16.00, 'Sandra Kenaan', 1, 89, 'English', 'Dar Al-Balad', 02, 5, 'LIBTECH05'),
('0000000010001#011', '0000000010001', 'Physics Basics', 'Science', 10.00, NULL, 3, 300, 'English', 'Dar Al-Kitaba', 11, 1, 'LIBTECH01'),
('0000000011002#012', '0000000011002', 'Calculus 101', 'Maths', 10.00, NULL, 1, 400, 'English', 'Dar Al-Nasher', 12, 2, 'LIBTECH02'),
('0000000012003#013', '0000000012003', 'Modern Poetry', 'Literature', 8.00, 'Lina Masri', 2, 120, 'Arabic', 'Dar Al-Turath', 13, 3, 'LIBTECH03'),
('0000000013004#014', '0000000013004', 'Business Growth', 'Business', 15.00, NULL, 1, 250, 'English', 'Dar Al-Hekma', 14, 4, 'LIBTECH04'),
('0000000014005#015', '0000000014005', 'Graphic Design', 'Arts', 20.00, NULL, 4, 320, 'English', 'Kalimat Lebanon', 15, 5, 'LIBTECH05'),
('0000000015006#016', '0000000015006', 'Interior Decor', 'Arts', 25.00, NULL, 3, 180, 'English', 'Dar Al-Adab', 16, 6, 'LIBTECH06'),
('0000000016007#017', '0000000016007', 'Molecular Biology', 'Science', 30.00, NULL, 2, 500, 'English', 'Dar Al-Hayat', 17, 2, 'LIBTECH07'),
('0000000017008#018', '0000000017008', 'Civilizations', 'History', 20.00, NULL, 5, 400, 'English', 'Dar Al-Watan', 18, 3, 'LIBTECH08'),
('0000000018009#019', '0000000018009', 'Perspectives', 'Philosophy', 12.00, NULL, 1, 200, 'English', 'Al-Qalam', 19, 4, 'LIBTECH09'),
('0000000019001#020', '0000000019001', 'Marketing 101', 'Business', 15.00, NULL, 1, 300, 'English', 'Dar Al-Manar', 20, 5, 'LIBTECH10'),
('0000000020002#021', '0000000020002', 'Astronomy', 'Science', 35.00, NULL, 4, 350, 'English', 'Dar Al-Risala', 21, 1, 'LIBTECH11'),
('0000000021003#022', '0000000021003', 'Mediterranean Cooking', 'Cooking', 10.00, 'Jana Khalil', 1, 180, 'English', 'Dar Al-Maarifa', 22, 2, 'LIBTECH12'),
('0000000022004#023', '0000000022004', 'Italian Recipes', 'Cooking', 20.00, 'Marco Rossi', 2, 220, 'Italian', 'Today News', 23, 3, 'LIBTECH13'),
('0000000023005#024', '0000000023005', 'Arabic Calligraphy', 'Arts', 15.00, 'Nour Hassan', 1, 150, 'Arabic', 'Dar Al-Balad', 24, 4, 'LIBTECH14'),
('0000000024006#025', '0000000024006', 'Digital Marketing', 'Business', 25.00, NULL, 2, 270, 'English', 'Dar Al-Hekma', 25, 5, 'LIBTECH15'),
('0000000025007#026', '0000000025007', 'Big Data Analysis', 'Technology', 30.00, NULL, 3, 320, 'English', 'Kalimat Lebanon', 26, 6, 'LIBTECH01'),
('0000000026008#027', '0000000026008', 'Artificial Intelligence', 'Technology', 35.00, NULL, 4, 450, 'English', 'Dar Al-Fikr', 27, 1, 'LIBTECH02'),
('0000000027009#028', '0000000027009', 'Cybersecurity', 'Technology', 30.00, NULL, 2, 280, 'English', 'Lebanon Readings', 28, 2, 'LIBTECH03'),
('0000000028001#029', '0000000028001', 'Yoga for Beginners', 'Health', 10.00, NULL, 1, 150, 'English', 'Dar Al-Salam', 29, 3, 'LIBTECH04'),
('0000000029002#030', '0000000029002', 'Mindfulness', 'Health', 15.00, NULL, 1, 200, 'English', 'WassupLebanon', 30, 4, 'LIBTECH05'),
('0000000030003#031', '0000000030003', 'Machine Learning Basics', 'Technology', 35.00, NULL, 3, 350, 'English', 'Dar Al-Kitaba', 31, 5, 'LIBTECH06'),
('0000000031004#032', '0000000031004', 'The Art of Negotiation', 'Business', 20.00, NULL, 2, 240, 'English', 'Dar Al-Hekma', 32, 6, 'LIBTECH07'),
('0000000032005#033', '0000000032005', 'Quantum Physics Explained', 'Science', 40.00, NULL, 5, 400, 'English', 'Dar Al-Manar', 33, 1, 'LIBTECH08'),
('0000000033006#034', '0000000033006', 'Design Thinking', 'Business', 30.00, NULL, 2, 280, 'English', 'Kalimat Lebanon', 34, 2, 'LIBTECH09'),
('0000000034007#035', '0000000034007', 'Ancient Cultures', 'History', 35.00, NULL, 3, 320, 'English', 'Dar Al-Risala', 35, 3, 'LIBTECH10'),
('0000000035008#036', '0000000035008', 'Data Science Advanced', 'Technology', 40.00, NULL, 4, 420, 'English', 'Lebanon Readings', 36, 4, 'LIBTECH11'),
('0000000036009#037', '0000000036009', 'Cooking for Kids', 'Cooking', 20.00, 'Nadia Abed', 1, 120, 'English', 'Dar Al-Maarifa', 37, 5, 'LIBTECH12'),
('0000000037001#038', '0000000037001', 'World Mythologies', 'History', 40.00, NULL, 4, 350, 'English', 'Today News', 38, 6, 'LIBTECH13');


INSERT INTO Authors_booksale (ISBN, Author_Name)
VALUES
('0000000002431', 'Sandra Smith'),
('0000000003421', 'Francois Olivier'),
('0000000003421', 'Maurice Dupont'),
('0000000004562', 'Rawad Kaadan'),
('0000000004562', 'Raed Lawand'),
('0000000004562', 'Wael Kassis'),
('0000000006772', 'Zeinab Kalach'),
('0000000006772', 'Pamela Hokayem'),
('0000000007880', 'Camilla Ponduras'),
('0000000007994', 'Donald Harris'),
('0000000010001', 'Liam Brown'),
('0000000010001', 'Emma Johnson'),
('0000000011002', 'Michael Carter'),
('0000000012003', 'Nadine El-Mir'),
('0000000012003', 'Tarek Ghanem'),
('0000000013004', 'Oliver Thompson'),
('0000000013004', 'Sophia Wilson'),
('0000000014005', 'Noah Robinson'),
('0000000014005', 'Lucas Martinez'),
('0000000015006', 'Mia Lopez'),
('0000000015006', 'Ava Garcia'),
('0000000016007', 'Ella Gonzalez'),
('0000000016007', 'Alexander Rivera'),
('0000000017008', 'Isabella Perez'),
('0000000018009', 'James Anderson'),
('0000000019001', 'Grace Moore'),
('0000000020002', 'Benjamin Clark'),
('0000000021003', 'Charlotte Young'),
('0000000022004', 'Abdullah Hassan'),
('0000000023005', 'Sara Ahmed'),
('0000000024006', 'Fatima Hussein');


INSERT INTO Authors_bookrent (BookID, Author_Name)
VALUES
('0000000002431#001', 'Sandra Smith'),
('0000000003421#012', 'Francois Olivier'),
('0000000004562#012', 'Maurice Dupont'),
('0000000004989#023', 'Rawad Kaadan'),
('0000000005232#003', 'Raed Lawand'),
('0000000005900#002', 'Wael Kassis'),
('0000000006113#020', 'Zeinab Kalach'),
('0000000006772#012', 'Pamela Hokayem'),
('0000000007880#001', 'Camilla Ponduras'),
('0000000007994#010', 'Donald Harris'),
('0000000010001#011', 'Liam Brown'),
('0000000010001#011', 'Emma Johnson'),
('0000000011002#012', 'Michael Carter'),
('0000000012003#013', 'Nadine El-Mir'),
('0000000012003#013', 'Tarek Ghanem'),
('0000000013004#014', 'Oliver Thompson'),
('0000000013004#014', 'Sophia Wilson'),
('0000000014005#015', 'Noah Robinson'),
('0000000014005#015', 'Lucas Martinez'),
('0000000015006#016', 'Mia Lopez'),
('0000000015006#016', 'Ava Garcia'),
('0000000016007#017', 'Ella Gonzalez'),
('0000000016007#017', 'Alexander Rivera'),
('0000000017008#018', 'Isabella Perez'),
('0000000018009#019', 'James Anderson'),
('0000000019001#020', 'Grace Moore'),
('0000000020002#021', 'Benjamin Clark'),
('0000000021003#022', 'Charlotte Young'),
('0000000022004#023', 'Abdullah Hassan'),
('0000000023005#024', 'Sara Ahmed'),
('0000000024006#025', 'Fatima Hussein');



INSERT INTO Stores_Items (BranchID, Barcode, Qty_Stored)
VALUES
    ('LIBTECH01', '0000000000010001', 25),
    ('LIBTECH01', '0000000000020198', 30),
    ('LIBTECH02', '0000000000020290', 29),
    ('LIBTECH03', '0000000000030278', 34),
    ('LIBTECH03', '0000000000030240', 35),
    ('LIBTECH04', '0000000000030560', 12),
    ('LIBTECH05', '0000000000040134', 34),
    ('LIBTECH09', '0000000000040250', 5),
    ('LIBTECH03', '0000000000040255', 14),
    ('LIBTECH03', '0000000000040300', 38),
    ('LIBTECH06', '0000000000050001', 20),
    ('LIBTECH07', '0000000000050002', 25),
    ('LIBTECH08', '0000000000060003', 15),
    ('LIBTECH09', '0000000000060004', 35),
    ('LIBTECH10', '0000000000070005', 30),
    ('LIBTECH11', '0000000000070006', 40),
    ('LIBTECH12', '0000000000080007', 50),
    ('LIBTECH13', '0000000000090008', 30),
    ('LIBTECH14', '0000000000100009', 25),
    ('LIBTECH15', '0000000000110010', 35),
    ('LIBTECH01', '0000000000120011', 30),
    ('LIBTECH02', '0000000000130012', 25),
    ('LIBTECH03', '0000000000140013', 40),
    ('LIBTECH04', '0000000000150014', 20),
    ('LIBTECH05', '0000000000160015', 15),
    ('LIBTECH06', '0000000000170016', 35),
    ('LIBTECH07', '0000000000180017', 50),
    ('LIBTECH08', '0000000000190018', 30),
    ('LIBTECH09', '0000000000200019', 20),
    ('LIBTECH10', '0000000000210020', 40);



INSERT INTO Stores_booksforsale (BranchID, ISBN, Number_of_Copies)
VALUES
    ('LIBTECH01', '0000000002431', 12),
    ('LIBTECH03', '0000000003421', 34),
    ('LIBTECH02', '0000000003421', 23),
    ('LIBTECH03', '0000000004562', 21),
    ('LIBTECH04', '0000000004562', 23),
    ('LIBTECH05', '0000000004562', 33),
    ('LIBTECH06', '0000000006772', 10),
    ('LIBTECH07', '0000000006772', 9),
    ('LIBTECH08', '0000000007880', 3),
    ('LIBTECH09', '0000000007994', 18),
    ('LIBTECH10', '0000000010001', 15),
    ('LIBTECH11', '0000000011002', 20),
    ('LIBTECH12', '0000000012003', 25),
    ('LIBTECH13', '0000000013004', 18),
    ('LIBTECH14', '0000000014005', 10),
    ('LIBTECH15', '0000000015006', 12),
    ('LIBTECH01', '0000000016007', 20),
    ('LIBTECH02', '0000000017008', 15),
    ('LIBTECH03', '0000000018009', 25),
    ('LIBTECH04', '0000000019001', 30),
    ('LIBTECH05', '0000000020002', 22),
    ('LIBTECH06', '0000000021003', 10),
    ('LIBTECH07', '0000000022004', 14),
    ('LIBTECH08', '0000000023005', 18),
    ('LIBTECH09', '0000000024006', 17),
    ('LIBTECH10', '0000000025007', 11),
    ('LIBTECH11', '0000000026008', 13),
    ('LIBTECH12', '0000000027009', 19),
    ('LIBTECH13', '0000000028001', 20),
    ('LIBTECH14', '0000000029002', 16),
    ('LIBTECH15', '0000000030003', 8),
    ('LIBTECH01', '0000000031004', 15),
    ('LIBTECH02', '0000000032005', 10),
    ('LIBTECH03', '0000000033006', 18),
    ('LIBTECH04', '0000000034007', 13),
    ('LIBTECH05', '0000000035008', 21),
    ('LIBTECH06', '0000000036009', 12),
    ('LIBTECH07', '0000000037001', 14);


INSERT INTO Buys_Books (Username, BranchID, ISBN, Quantity, Date_Time)
VALUES
    ('en01', 'LIBTECH01', '0000000002431', 2, '2024-10-01 11:12:23'),
    ('gh21', 'LIBTECH02', '0000000003421', 1, '2024-09-10 13:31:02'),
    ('jf10', 'LIBTECH02', '0000000003421', 1, '2024-06-30 17:05:15'),
    ('fm02', 'LIBTECH01', '0000000004562', 2, '2024-04-01 20:45:09'),
    ('jb01', 'LIBTECH09', '0000000004562', 1, '2024-07-31 18:10:10'),
    ('nn12', 'LIBTECH07', '0000000004562', 1, '2024-05-23 10:40:34'),
    ('rh17', 'LIBTECH05', '0000000006772', 1, '2024-08-17 11:11:09'),
    ('rh18', 'LIBTECH08', '0000000006772', 2, '2024-04-14 12:30:23'),
    ('es02', 'LIBTECH09', '0000000007880', 3, '2024-05-31 17:32:06'),
    ('nm01', 'LIBTECH10', '0000000007994', 1, '2024-08-06 11:57:05'),
    ('ha01', 'LIBTECH11', '0000000010001', 2, '2024-07-10 10:20:00'),
    ('fm12', 'LIBTECH12', '0000000011002', 1, '2024-06-15 15:45:10'),
    ('td21', 'LIBTECH13', '0000000012003', 3, '2024-05-20 12:30:50'),
    ('aa22', 'LIBTECH14', '0000000013004', 2, '2024-04-05 09:40:30'),
    ('sc34', 'LIBTECH15', '0000000014005', 1, '2024-09-12 18:10:00'),
    ('he01', 'LIBTECH01', '0000000015006', 1, '2024-03-25 14:20:40'),
    ('kh18', 'LIBTECH02', '0000000016007', 1, '2024-02-18 16:10:15'),
    ('ls99', 'LIBTECH03', '0000000017008', 2, '2024-07-28 19:30:25'),
    ('md21', 'LIBTECH04', '0000000018009', 3, '2024-08-14 11:10:55'),
    ('sj01', 'LIBTECH05', '0000000019001', 1, '2024-10-02 13:20:35');


INSERT INTO Purchases_Items (Username, BranchID, Barcode, Quantity, Date_Time)
VALUES
    ('en01', 'LIBTECH01', '0000000000010001', 2, '2024-10-01 11:12:23'),
    ('gh21', 'LIBTECH02', '0000000000020198', 1, '2024-09-10 13:31:02'),
    ('jf10', 'LIBTECH02', '0000000000020290', 1, '2024-06-30 17:05:15'),
    ('fm02', 'LIBTECH01', '0000000000030278', 2, '2024-04-01 20:45:09'),
    ('jb01', 'LIBTECH09', '0000000000030240', 1, '2024-07-31 18:10:10'),
    ('nn12', 'LIBTECH07', '0000000000030560', 1, '2024-05-23 10:40:34'),
    ('rh17', 'LIBTECH05', '0000000000040134', 1, '2024-08-17 11:11:09'),
    ('rh18', 'LIBTECH08', '0000000000040250', 2, '2024-04-14 12:30:23'),
    ('es02', 'LIBTECH09', '0000000000040255', 3, '2024-05-31 17:32:06'),
    ('nm01', 'LIBTECH10', '0000000000040300', 1, '2024-08-06 11:57:05'),
    ('ha01', 'LIBTECH11', '0000000000050001', 2, '2024-09-01 14:20:15'),
    ('fm12', 'LIBTECH12', '0000000000050002', 1, '2024-07-20 16:35:22'),
    ('td21', 'LIBTECH13', '0000000000060003', 3, '2024-06-15 10:25:18'),
    ('aa22', 'LIBTECH14', '0000000000060004', 2, '2024-05-12 11:45:33'),
    ('sc34', 'LIBTECH15', '0000000000070005', 1, '2024-10-10 19:00:40'),
    ('he01', 'LIBTECH01', '0000000000070006', 2, '2024-04-22 12:45:55'),
    ('kh18', 'LIBTECH02', '0000000000080007', 3, '2024-03-15 09:20:50'),
    ('ls99', 'LIBTECH03', '0000000000090008', 1, '2024-06-25 17:10:10'),
    ('md21', 'LIBTECH04', '0000000000100009', 1, '2024-08-19 14:35:05'),
    ('sj01', 'LIBTECH05', '0000000000110010', 2, '2024-09-30 16:00:45');



INSERT INTO Borrows (Username, BookID, Date_Out, Due_Date, Penalty, Status)
VALUES
    ('en01', '0000000002431#001', '2024-05-05', '2024-05-15', 10.00,'Returned'),
    ('en01', '0000000002431#001', '2024-09-09', '2024-12-30', 10.00,'Borrowed'),
    ('gh21', '0000000002431#001', '2024-09-09', '2024-12-30', 10.00,'Borrowed'),
    ('jf10', '0000000002431#001', '2024-09-09', '2024-12-30', 10.00,'Borrowed'),
    ('gh21', '0000000003421#012', '2024-09-09', '2024-12-30', 10.00,'Borrowed'),
    ('gh21', '0000000003421#012', '2024-07-25', '2024-08-05', 10.00,'Returned'),
    ('jf10', '0000000004562#012', '2024-01-03', '2024-01-13', 15.00,'Returned'),
    ('en01', '0000000004989#023', '2024-11-15', '2024-12-25', 12.00,'Borrowed'),
    ('fm02', '0000000004989#023', '2024-06-15', '2024-06-25', 12.00,'Returned'),
    ('jb01', '0000000005232#003', '2024-09-23', '2024-10-03', 11.00,'Returned'),
    ('nn12', '0000000005900#002', '2024-03-20', '2024-03-31', 10.00,'Returned'),
    ('rh17', '0000000006113#020', '2024-05-22', '2024-06-02', 13.00,'Returned'),
    ('rh18', '0000000006772#012', '2024-04-12', '2024-04-22', 13.00,'Returned'),
    ('es02', '0000000007880#001', '2024-09-01', '2024-09-11', 12.00,'Returned'),
    ('nm01', '0000000007994#010', '2024-02-04', '2024-02-14', 10.00,'Returned'),
    ('ha01', '0000000010001#011', '2024-07-10', '2024-07-20', 8.00,'Returned'),
    ('fm12', '0000000011002#012', '2024-06-15', '2024-06-25', 10.00,'Returned'),
    ('td21', '0000000012003#013', '2024-04-10', '2024-04-20', 12.00,'Returned'),
    ('aa22', '0000000013004#014', '2024-03-01', '2024-03-10', 10.00,'Returned'),
    ('sc34', '0000000014005#015', '2024-02-12', '2024-02-22', 9.00,'Returned'),
    ('he01', '0000000015006#016', '2024-09-30', '2024-10-10', 15.00,'Returned'),
    ('kh18', '0000000016007#017', '2024-01-01', '2024-01-10', 14.00,'Returned'),
    ('ls99', '0000000017008#018', '2024-03-15', '2024-03-25', 11.00,'Returned'),
    ('md21', '0000000018009#019', '2024-04-25', '2024-05-05', 8.00,'Returned'),
    ('sj01', '0000000019001#020', '2024-05-10', '2024-05-20', 10.00,'Returned'),
    ('en01', '0000000002431#001', '2024-11-30', '2024-11-30', 10.00,'Borrowed'),
    ('gh21', '0000000002431#001', '2024-11-28', '2024-12-01', 10.00,'Borrowed'),
    ('jf10', '0000000002431#001', '2024-11-27', '2024-12-02', 10.00,'Borrowed');
    
    


INSERT INTO Sale_to_Rent (BookID, ISBN, Date_Moved, Discount)
VALUES
    ('0000000002431#001', '0000000002431', '2024-10-10', 35.00),
    ('0000000003421#012', '0000000003421', '2024-10-11', 35.00),
    ('0000000004562#012', '0000000004562', '2024-10-12', 35.00),
    ('0000000004989#023', '0000000004989', '2024-09-30', 35.00),
    ('0000000005232#003', '0000000005232', '2024-09-29', 35.00),
    ('0000000005900#002', '0000000005900', '2024-10-17', 35.00),
    ('0000000006113#020', '0000000006113', '2024-09-27', 35.00),
    ('0000000006772#012', '0000000006772', '2024-08-31', 35.00),
    ('0000000007880#001', '0000000007880', '2024-08-30', 35.00),
    ('0000000007994#010', '0000000007994', '2024-08-23', 35.00),
    ('0000000010001#011', '0000000010001', '2024-10-20', 35.00),
    ('0000000011002#012', '0000000011002', '2024-10-21', 35.00),
    ('0000000012003#013', '0000000012003', '2024-10-22', 35.00),
    ('0000000013004#014', '0000000013004', '2024-10-23', 35.00),
    ('0000000014005#015', '0000000014005', '2024-10-24', 35.00),
    ('0000000015006#016', '0000000015006', '2024-10-25', 35.00),
    ('0000000016007#017', '0000000016007', '2024-10-26', 35.00),
    ('0000000017008#018', '0000000017008', '2024-10-27', 35.00),
    ('0000000018009#019', '0000000018009', '2024-10-28', 35.00),
    ('0000000019001#020', '0000000019001', '2024-10-29', 35.00);


-- Complex Queries
--Q1:Identify Top 5 Borrowed Books in the Last Year

SELECT br.Title, COUNT(b.BookID) AS Borrow_Count
FROM Borrows b
JOIN Books_for_Rent br ON b.BookID = br.BookID
WHERE b.Date_Out >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY br.Title
ORDER BY Borrow_Count DESC
LIMIT 5;

--Q2: List Customers Who Have Unreturned Books Past Due Date

SELECT c.Username, c.First_Name, c.Last_Name, b.BookID, br.Title, b.Due_Date, b.Penalty,
       (b.Penalty + (CURRENT_DATE - b.Due_Date) * 0.5) AS Fine_Amount
FROM Borrows b
JOIN Customer c ON b.Username = c.Username
JOIN Books_for_Rent br ON b.BookID = br.BookID
WHERE b.Status = 'Borrowed'
AND b.Due_Date < CURRENT_DATE;



--Q4: Branch with the Highest Number of Rentals

SELECT b.BranchID, COUNT(br.BookID) AS Rentals_Count
FROM Borrows br
JOIN Books_for_Rent b ON br.BookID = b.BookID
GROUP BY b.BranchID
ORDER BY Rentals_Count DESC
LIMIT 1;

--Q5: Retrieve the total amount each customer has spent on book purchases and item purchases and the most frequently visited branch.

SELECT 
    c.Username,
    c.First_Name,
    c.Last_Name,
    COALESCE(SUM(b.Quantity * bs.Price), 0) AS Total_Book_Spending,
    COALESCE(SUM(i.Quantity * it.Price), 0) AS Total_Item_Spending,
    (SELECT BranchID 
     FROM Buys_Books b2 
     WHERE b2.Username = c.Username 
     GROUP BY BranchID 
     ORDER BY COUNT(*) DESC 
     LIMIT 1) AS Favorite_Branch
FROM 
    Customer c
LEFT JOIN Buys_Books b ON c.Username = b.Username
LEFT JOIN Books_for_Sale bs ON b.ISBN = bs.ISBN
LEFT JOIN Purchases_Items i ON c.Username = i.Username
LEFT JOIN Items it ON i.Barcode = it.Barcode
GROUP BY 
    c.Username, c.First_Name, c.Last_Name;

--Q6: Categorize customers into segments (High, Medium, Low spenders) based on their total spending

WITH Customer_Spend AS ( 
    SELECT 
        c.Username, 
        COALESCE(SUM(b.Quantity * bs.Price), 0) + COALESCE(SUM(i.Quantity * it.Price), 0) AS Total_Spending
    FROM 
        Customer c
    LEFT JOIN Buys_Books b ON c.Username = b.Username
    LEFT JOIN Books_for_Sale bs ON b.ISBN = bs.ISBN
    LEFT JOIN Purchases_Items i ON c.Username = i.Username
    LEFT JOIN Items it ON i.Barcode = it.Barcode
    GROUP BY c.Username
)
SELECT 
    Username, 
    CASE 
        WHEN Total_Spending > 500 THEN 'High Spender'
        WHEN Total_Spending BETWEEN 200 AND 500 THEN 'Medium Spender'
        ELSE 'Low Spender'
    END AS Customer_Segment
FROM 
    Customer_Spend;
-- COALESCE Ensures that if either SUM() returns NULL, it defaults to 0 instead, preventing null values from affecting the result.

--Q7: Find the top 5 suppliers who generated the most revenue from their items.

SELECT 
    s.Supp_Name, 
    SUM(i.Price * p.Quantity) AS Total_Revenue
FROM 
    Purchases_Items p
JOIN 
    Items i ON p.Barcode = i.Barcode
JOIN 
    Supplier s ON i.Supp_Name = s.Supp_Name
GROUP BY 
    s.Supp_Name
ORDER BY 
    Total_Revenue DESC
LIMIT 2;

--Q8:List all customers who bought books or items more than once from a single library branch.     
SELECT c.Username, c.First_Name, c.Last_Name, COUNT(b.ISBN) + COUNT(p.Barcode) AS Total_Purchases, b.BranchID
FROM Customer c
LEFT JOIN Buys_Books b ON c.Username = b.Username
LEFT JOIN Purchases_Items p ON c.Username = p.Username
GROUP BY c.Username, c.First_Name, c.Last_Name, b.BranchID
HAVING COUNT(b.ISBN) + COUNT(p.Barcode) > 1;


--Q9:Retrieve staff who manage libraries with the highest number of items

SELECT s.First_Name, s.Last_Name, s.BranchID, SUM(si.Qty_Stored) AS Total_Items
FROM Staff s
JOIN Stores_Items si ON s.BranchID = si.BranchID
WHERE s.Post = 'Manager'
GROUP BY s.First_Name, s.Last_Name, s.BranchID
ORDER BY Total_Items DESC
LIMIT 1;



--Q10: Find library branches that are running low on inventory.

SELECT si.BranchID, l.Address, SUM(si.Qty_Stored) AS Total_Items, SUM(sb.Number_of_Copies) AS Total_Books
FROM Stores_Items si
JOIN Libraryy l ON si.BranchID = l.BranchID
JOIN Stores_booksforsale sb ON si.BranchID = sb.BranchID
GROUP BY si.BranchID, l.Address
HAVING SUM(si.Qty_Stored) + SUM(sb.Number_of_Copies) < 40;


--Q11:Total Revenue from Book and Item Sales by Library Branch

SELECT 
    l.BranchID,
    COALESCE(SUM(bb.Quantity * bfs.Price), 0) AS Book_Sales_Revenue,
    COALESCE(SUM(pi.Quantity * i.Price), 0) AS Item_Sales_Revenue,
    COALESCE(SUM(bb.Quantity * bfs.Price), 0) + COALESCE(SUM(pi.Quantity * i.Price), 0) AS Total_Revenue
FROM 
    Libraryy l
LEFT JOIN Buys_Books bb ON l.BranchID = bb.BranchID
LEFT JOIN Books_for_Sale bfs ON bb.ISBN = bfs.ISBN
LEFT JOIN Purchases_Items pi ON l.BranchID = pi.BranchID
LEFT JOIN Items i ON pi.Barcode = i.Barcode
GROUP BY l.BranchID
ORDER BY Total_Revenue DESC;

--Q12: Customers Who Borrowed and Bought the Same Book Title

SELECT DISTINCT 
    bo.Username, 
    bfr.Title, 
    bb.Date_Time AS Purchase_Date, 
    bo.Date_Out AS Borrow_Date
FROM 
    Borrows bo
JOIN Books_for_Rent bfr ON bo.BookID = bfr.BookID
JOIN Buys_Books bb ON bo.Username = bb.Username AND bfr.ISBN = bb.ISBN;

--Q13: Retrieve librarians working the most hours across all branches.

SELECT s.First_Name, s.Last_Name, s.BranchID, s.Hours
FROM Staff s
WHERE s.Post = 'Librarian'
ORDER BY s.Hours DESC
LIMIT 5;

--VIEWS , TRIGGERS, PROCEDURES, FUNCTIONS

--View 1: This view provides a summary of items supplied by each supplier along with the total quantity supplied
CREATE VIEW Supplier_Supply_Summary AS
SELECT 
    s.Supp_Name, 
    i.Items_Name, 
    SUM(i.Qty_Supplied) AS Total_Supplied
FROM 
    Items i
JOIN 
    Supplier s ON i.Supp_Name = s.Supp_Name
GROUP BY 
    s.Supp_Name, i.Items_Name
ORDER BY 
    s.Supp_Name;

--View2: Customers With Outstanding Penalties

CREATE VIEW Customers_With_Penalties AS
SELECT 
    c.Username, 
    c.First_Name, 
    c.Last_Name, 
    SUM(br.Penalty) AS Total_Penalty
FROM 
    Borrows br
JOIN 
    Customer c ON br.Username = c.Username
WHERE 
    br.Penalty > 0
GROUP BY 
    c.Username, c.First_Name, c.Last_Name
ORDER BY 
    Total_Penalty DESC;
--Test Case:
SELECT * FROM Customers_With_Penalties;


--Trigger1: Automatically Update the Quantity of Books for Sale After a Purchase

CREATE OR REPLACE FUNCTION update_book_stock()
RETURNS TRIGGER AS $$
BEGIN
    -- Check if the number of copies in stock will become negative
    IF (SELECT Number_of_Copies FROM Stores_Booksforsale 
        WHERE BranchID = NEW.BranchID AND ISBN = NEW.ISBN) < NEW.Quantity THEN
        RAISE EXCEPTION 'Not enough copies in stock for ISBN % in branch %', NEW.ISBN, NEW.BranchID;
    END IF;
    
    -- Update the stock after a successful purchase
    UPDATE Stores_Booksforsale
    SET Number_of_Copies = Number_of_Copies - NEW.Quantity
    WHERE BranchID = NEW.BranchID AND ISBN = NEW.ISBN;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_book_stock
AFTER INSERT ON Buys_Books
FOR EACH ROW
EXECUTE FUNCTION update_book_stock();

--Trigger2: Prevent a user from borrowing a new book if they have outstanding penalties in the Borrows table.

CREATE OR REPLACE FUNCTION prevent_borrow_with_overdue()
RETURNS TRIGGER AS $$
BEGIN
    -- Check for overdue books
    IF EXISTS (
        SELECT 1
        FROM Borrows
        WHERE Username = NEW.Username 
        AND Due_Date < CURRENT_DATE      -- Check if due date has passed
        AND Status = 'Borrowed'
    ) THEN
        RAISE EXCEPTION 'User % has overdue books and cannot borrow a new book', NEW.Username;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create the trigger to call the function before a new row is inserted
CREATE TRIGGER trigger_prevent_borrow_with_overdue
BEFORE INSERT ON Borrows
FOR EACH ROW
EXECUTE FUNCTION prevent_borrow_with_overdue();


--Function:
CREATE OR REPLACE FUNCTION handle_sale_to_rent()
RETURNS TRIGGER AS $$
DECLARE
    shelf_no INT;
    row_no INT;
    branch_id VARCHAR(10);
    existing_price NUMERIC;  -- To store the price of the existing book, if found
BEGIN
    -- Step 1: Extract Shelf_No and Row_No from BookID
    shelf_no := CAST(SUBSTRING(NEW.BookID FROM POSITION('#' IN NEW.BookID) + 1 FOR 2) AS INT);
    row_no := CAST(SUBSTRING(NEW.BookID FROM POSITION('#' IN NEW.BookID) + 3 FOR 1) AS INT);

    -- Step 2: Get the BranchID from Stores_Booksforsale table
    SELECT BranchID INTO branch_id
    FROM Stores_Booksforsale
    WHERE ISBN = NEW.ISBN
    LIMIT 1;

    -- Check if a valid branch was found
    IF branch_id IS NULL THEN
        RAISE EXCEPTION 'Cannot move book % to rent. It is not stored in any branch.', NEW.ISBN;
    END IF;

    -- Step 3: Check if the book exists in the Books_for_Sale table and has at least one copy
    IF NOT EXISTS (
        SELECT 1
        FROM Stores_Booksforsale
        WHERE ISBN = NEW.ISBN AND BranchID = branch_id AND Number_of_Copies > 0
    ) THEN
        RAISE EXCEPTION 'Cannot move book % to rent, not enough copies available in branch %.', NEW.ISBN, branch_id;
    END IF;

    -- Step 4: Decrease the number of copies for sale by 1
    UPDATE Stores_Booksforsale
    SET Number_of_Copies = Number_of_Copies - 1
    WHERE ISBN = NEW.ISBN AND BranchID = branch_id;

    -- Step 5: Check if there is an existing book with the same ISBN but a different BookID in Books_for_Rent
    SELECT Price INTO existing_price
    FROM Books_for_Rent
    WHERE ISBN = NEW.ISBN
    LIMIT 1;

    -- Step 6: Determine the price of the moved book
    IF existing_price IS NOT NULL THEN
        -- Use the price of the existing book
        RAISE NOTICE 'An existing book with ISBN % is found. Using the same price: %.', NEW.ISBN, existing_price;
    ELSE
        -- Calculate the discounted price
        existing_price := ROUND((SELECT Price FROM Books_for_Sale WHERE ISBN = NEW.ISBN) * (1 - NEW.Discount / 100.0), 2);
        RAISE NOTICE 'No existing book with ISBN % is found. Using the discounted price: %.', NEW.ISBN, existing_price;
    END IF;

    -- Step 7: Insert the book into the Books_for_Rent table
    INSERT INTO Books_for_Rent (
        BookID, ISBN, Title, Genre, Price, Translator, Edition, Pages, Lang, Publisher_Name, Shelf_No, Row_No, BranchID
    )
    SELECT
        NEW.BookID, 
        b.ISBN, 
        b.Title, 
        b.Genre, 
        existing_price,  -- Set the price
        b.Translator, 
        b.Edition, 
        b.Pages, 
        b.Lang, 
        b.Publisher_Name, 
        shelf_no,  -- Extracted Shelf_No
        row_no,    -- Extracted Row_No
        branch_id  -- Derived BranchID
    FROM Books_for_Sale b
    WHERE b.ISBN = NEW.ISBN;

    -- Log the action (optional, for audit purposes)
    RAISE NOTICE 'Book % has been successfully moved from sale to rent in branch % with Shelf_No: %, Row_No: %, and price: %.', NEW.ISBN, branch_id, shelf_no, row_no, existing_price;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger for the Sale_to_Rent table
CREATE or REPLACE TRIGGER trigger_handle_sale_to_rent
BEFORE INSERT ON Sale_to_Rent
FOR EACH ROW
EXECUTE FUNCTION handle_sale_to_rent();



--Function: This function checks whether a specific book (based on its Name) is available in a given branch and returns the number of copies available.

CREATE OR REPLACE FUNCTION check_book_availability(Title_input TEXT, branch_id_input VARCHAR)
RETURNS TEXT AS $$
DECLARE
    book_title TEXT;
BEGIN
    SELECT bs.Title
    INTO book_title
    FROM Books_for_Sale bs
    JOIN Stores_Booksforsale sb ON bs.ISBN = sb.ISBN
    WHERE bs.Title = Title_input AND sb.BranchID = branch_id_input;

    RETURN book_title; -- Returns the title if the book is available
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Book not available';
END;
$$ LANGUAGE plpgsql;


--Example usage:
SELECT check_book_availability('Electronics', 'LIBTECH01');

--Function: Calculate Total Inventory Value for a Branch
CREATE OR REPLACE FUNCTION total_inventory_value(branch_id VARCHAR)
RETURNS NUMERIC AS $$
DECLARE
    total_value NUMERIC := 0;
BEGIN
    SELECT 
        COALESCE(SUM(bfs.Price * sb.Number_of_Copies), 0) +
        COALESCE(SUM(i.Price * si.Qty_Stored), 0)
    INTO total_value
    FROM 
        Libraryy l
    LEFT JOIN Stores_Booksforsale sb ON l.BranchID = sb.BranchID
    LEFT JOIN Books_for_Sale bfs ON sb.ISBN = bfs.ISBN
    LEFT JOIN Stores_Items si ON l.BranchID = si.BranchID
    LEFT JOIN Items i ON si.Barcode = i.Barcode
    WHERE l.BranchID = branch_id;

    RETURN total_value;
END;
$$ LANGUAGE plpgsql;

-- Example usage:
SELECT total_inventory_value('LIBTECH01');




--Stored Procedure1: Transfer Book Stock Between Branches
CREATE OR REPLACE PROCEDURE transfer_book_stock(
    from_branch VARCHAR,
    to_branch VARCHAR,
    book_isbn CHAR(13), -- Renamed parameter to avoid conflict
    transfer_quantity INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    -- Check if the from_branch has enough stock
    IF NOT EXISTS (
        SELECT 1 
        FROM Stores_Booksforsale 
        WHERE BranchID = from_branch AND ISBN = book_isbn AND Number_of_Copies >= transfer_quantity
    ) THEN
        RAISE EXCEPTION 'Insufficient stock in branch % for book %', from_branch, book_isbn;
    END IF;

    -- Deduct stock from from_branch
    UPDATE Stores_Booksforsale
    SET Number_of_Copies = Number_of_Copies - transfer_quantity
    WHERE BranchID = from_branch AND ISBN = book_isbn;

    -- Add stock to to_branch
    INSERT INTO Stores_Booksforsale (BranchID, ISBN, Number_of_Copies)
    VALUES (to_branch, book_isbn, transfer_quantity)
    ON CONFLICT (BranchID, ISBN) 
    DO UPDATE SET Number_of_Copies = Stores_Booksforsale.Number_of_Copies + transfer_quantity;
END;
$$;


--example:
CALL transfer_book_stock('LIBTECH01', 'LIBTECH02', '0000000003421', 5);
